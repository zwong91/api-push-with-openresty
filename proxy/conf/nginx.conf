worker_processes  16;
error_log /usr/local/openresty/nginx/logs/perror.log;
pid       /usr/local/openresty/nginx/logs/nginx.pid;
events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/openresty/nginx/logs/paccess.log  main;
    open_log_file_cache off;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    upstream ups_endpoints {
        server 192.168.1.129:9006;
        server 192.168.1.203:9006;
        server 192.168.1.186:9006;
        server 192.168.1.62:9006;
    }

server {
    listen 30000;
    #server_name test.broadcast.com;

    access_log  /usr/local/openresty/nginx/logs/test.broadcast.com.access.log;
    error_log   /usr/local/openresty/nginx/logs/test.broadcast.com.error.log;

#   这个必须添加，否则无法获取请求的body
    lua_need_request_body on;
    location / {
        content_by_lua_block {
            local http = require "resty.http"
            local httpc = http.new()
            local upstream = require "ngx.upstream"
            local get_servers = upstream.get_servers
            local srvs, err = get_servers("ups_endpoints")

            local headers_req, _ = ngx.req.get_headers()
            for _, srv in ipairs(srvs) do
                local res, err = httpc:request_uri("http://"..srv["addr"]..ngx.var.request_uri, {
                    method = ngx.var.request_method,
                    body = ngx.var.request_body,
                    headers = headers_req
                })
                if res.status == ngx.HTTP_OK then
                    ngx.print(res.body)
                else
                    ngx.print(res.status)
                end
                ngx.print("\n")
            end
        }
     }
  }
}
